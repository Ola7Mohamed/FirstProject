#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;


enum enGameChoice { Stone = 1, Paper = 2, Scissors = 3 };
enum enWinner { Player1 = 1, Computer = 2, Draw = 3 };

struct stRoundInfo
{
	short RoundNumber = 0;
	enGameChoice Player1Choice;
	enGameChoice ComputerChoice;
	enWinner Winner;
	string WinnerName;

};

struct stGameResults
{
	short GameRounds = 0;
	short Player1WinTimes = 0;
	short ComputerWinTimes = 0;
	short DrawTimes = 0;
	enWinner GameWinner;
	string WinnerName = " ";



};

int RandomNumber(int From, int To)
{
	return  rand() % (To - From + 1) + From;
}

enGameChoice GetComputerChoice()
{
	return (enGameChoice)RandomNumber(1, 3);


}

enWinner WhoWonTheRound(stRoundInfo RoundInfo)
{
	if (RoundInfo.Player1Choice == RoundInfo.ComputerChoice)
		return enWinner::Draw;

	switch (RoundInfo.Player1Choice)
	{
	case enGameChoice::Stone:
		return (RoundInfo.ComputerChoice == enGameChoice::Paper) ? enWinner::Computer : enWinner::Player1;
	case enGameChoice::Paper:
		return (RoundInfo.ComputerChoice == enGameChoice::Scissors) ? enWinner::Computer : enWinner::Player1;
	case enGameChoice::Scissors:
		return (RoundInfo.ComputerChoice == enGameChoice::Stone) ? enWinner::Computer : enWinner::Player1;
	}
}

enWinner WhoWonTheGame(short Player1WinTimes, short ComputerWinTimes)
{
	if (Player1WinTimes > ComputerWinTimes) return enWinner::Player1;
	else if (ComputerWinTimes > Player1WinTimes) return enWinner::Computer;
	else
		return enWinner::Draw;

}

string ChoiceName(enGameChoice Choice)
{
	string arrGameChoices[3] = { "Stone" , "Paper" , "Scissors" };
	return arrGameChoices[Choice - 1];


}

string WinnerName(enWinner Winner)
{
	string arrWinnerName[3] = { "Player1" , "Computer" , "No Winner(Draw)" };
	return arrWinnerName[Winner - 1];


}
enGameChoice ReadPlayer1Choice()
{
	short Choice;
	do
	{
		cout << "\n 1/Stone 2/Paper 3/Scissors \n";
		cin >> Choice;

	} while (Choice < 1 || Choice > 3);
	return (enGameChoice)Choice;
}
void PrintRoundResults(stRoundInfo RoundInfo)
{
	cout << "\n____Round number " << RoundInfo.RoundNumber << "____\n";
	cout << "\nPlayer1 choice is :" << ChoiceName(RoundInfo.Player1Choice) << endl;
	cout << "\nComputer choice is :" << ChoiceName(RoundInfo.ComputerChoice) << endl;
	cout << "\nWinner name is : " << RoundInfo.WinnerName << endl;

}

stGameResults PlayGame(short HowManyRounds)
{
	stRoundInfo RoundInfo;
	short Player1WinTimes = 0, ComputerWinTimes = 0, DrawTimes = 0;
	short GameRound = 0;
	cout << "\n How many rounds do you want ?\n";
	cin >> HowManyRounds;
	for (short GameRound = 1; GameRound <= HowManyRounds; GameRound++)
	{

		cout << "\nRound [" << GameRound << "] begins:\n";
		RoundInfo.RoundNumber = GameRound;
		RoundInfo.Player1Choice = ReadPlayer1Choice();
		RoundInfo.ComputerChoice = GetComputerChoice();
		RoundInfo.Winner = WhoWonTheRound(RoundInfo);
		RoundInfo.WinnerName = WinnerName(RoundInfo.Winner);

		if (RoundInfo.Winner == enWinner::Player1)
			Player1WinTimes++;
		else if (RoundInfo.Winner == enWinner::Computer)
			ComputerWinTimes++;
		else
			DrawTimes++;

		PrintRoundResults(RoundInfo);
	}
	return { HowManyRounds, Player1WinTimes, ComputerWinTimes, DrawTimes, WhoWonTheGame(Player1WinTimes,  ComputerWinTimes), WinnerName(WhoWonTheGame(Player1WinTimes, ComputerWinTimes)) };
}


void StartGame()
{
	char PlayAgain = 'Y';
	do
	{
		system("cls");
		stGameResults GameResults = PlayGame(4);
		cout << "\nGame Over the winner is :\n" << GameResults.WinnerName << endl;
		cout << "\nDo you want play again ? Y / N :\n";
		cin >> PlayAgain;

	} while (PlayAgain == 'Y' || PlayAgain == 'y');


}

int main()
{
	srand((unsigned)time(NULL));
	StartGame();
	



	return 0;




}

